<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:convers="clr-namespace:FirstFloor.ModernUI.Windows.Converters">

    <Style TargetType="TreeView">
        <Setter Property="BorderThickness" Value="0" />
    </Style>

    <Style x:Key="ExpandCollapseToggleStyle"  TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable"  Value="False"/>
        <Setter Property="Width" Value="16"/>
        <Setter Property="Height" Value="16"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Width="16" Height="16" Background="Transparent" Padding="5,5,5,5" >
                        <Path x:Name="ExpandPath"   Stroke="#FF989898" StrokeThickness="1" Data="F1 M.5,.5, .5,6.5 6.5,.5 Z" UseLayoutRounding="True" SnapsToDevicePixels="True">
                            <Path.RenderTransform>
                                <RotateTransform Angle="135" CenterX="3" CenterY="3"/>
                            </Path.RenderTransform>
                        </Path>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter TargetName="ExpandPath"
                                    Property="Stroke"
                                    Value="{DynamicResource Accent}"/>
                        </Trigger>-->

                        <Trigger Property="IsChecked"  Value="True">
                            <Setter TargetName="ExpandPath" Property="RenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="180" CenterX="3" CenterY="3"/>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="ExpandPath" Property="Fill" Value="#FF595959"/>
                            <Setter TargetName="ExpandPath" Property="Stroke" Value="#FF262626"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <!--<Setter TargetName="ExpandPath"
                                    Property="Stroke"
                                    Value="{DynamicResource Accent}"/>-->
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TreeViewItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="{x:Type TreeViewItem}" TargetType="{x:Type TreeViewItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment"
                Value="{Binding Path=HorizontalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment"
                Value="{Binding Path=VerticalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Padding"  Value="4,2"/>
        <Setter Property="Foreground"  Value="{DynamicResource ItemText}"/>
        <Setter Property="FocusVisualStyle"  Value="{StaticResource TreeViewItemFocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="19"  Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>

                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>

                        <ToggleButton x:Name="Expander" Style="{StaticResource ExpandCollapseToggleStyle}"
                                      IsChecked="{Binding Path=IsExpanded,RelativeSource={RelativeSource TemplatedParent}}"  ClickMode="Press"/>
                        <Border Name="Bd" Grid.Column="1"  Background="{TemplateBinding Background}"  BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">

                            <ContentPresenter x:Name="PART_Header"  ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" Grid.Row="1" Grid.Column="1"  Grid.ColumnSpan="2"/>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="Expander" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                        <Trigger SourceName="Bd" Property="IsMouseOver" Value="True">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource ItemBackgroundHover}"/>
                            <Setter Property="Foreground" Value="{DynamicResource ItemTextHover}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource ItemBackgroundSelected}"/>
                            <Setter Property="Foreground" Value="{DynamicResource ItemTextSelected}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource ItemTextDisabled}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="VirtualizingStackPanel.IsVirtualizing" Value="true">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--默认选中背景色是整行样式-->
    <HierarchicalDataTemplate x:Key="ItemNode" ItemsSource="{Binding ChildNodes,Mode=TwoWay}">
        <Grid  Background="Transparent">
            <Grid.Resources>
                <convers:BooleanToVisibilityConverter x:Key="boolToVisible"/>
                <convers:VisibleToReverseConverter x:Key="visibleToReverse" />
                <sys:String x:Key="sysInverse">inverse</sys:String>
            </Grid.Resources>
            <Grid MinHeight="30" x:Name="userinfo" Background="Transparent" Margin="-5 0 0 0" Visibility="{Binding Visibility,ElementName=groupinginfo,Converter={StaticResource visibleToReverse},ConverterParameter={StaticResource sysInverse}}">
                <Grid Height="50" x:Name="grid">
                    <Border Background="#62acf9" Width="40" Height="40" CornerRadius="4" HorizontalAlignment="Left" Margin="0 0 0 0">
                        <TextBlock Text="{Binding SurName}" FontSize="23" Foreground="White" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Border>
                    <TextBlock Text="{Binding Name}" Margin="50 7 0 0" FontSize="13"/>
                    <TextBlock Text="{Binding Info}" Foreground="#808080" Margin="50 30 0 0"/>
                    <TextBlock Text="{Binding Count,StringFormat={}{0}人}" Foreground="#808080" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0 0 5 0"/>
                </Grid>
            </Grid>
            <StackPanel MinHeight="25" x:Name="groupinginfo" Orientation="Horizontal" Background="Transparent" HorizontalAlignment="Left" Visibility="{Binding IsGrouping,Converter={StaticResource boolToVisible}}">
                <TextBlock Text="{Binding Name}" Margin="3 0" VerticalAlignment="Center" HorizontalAlignment="Left"/>
            </StackPanel>
        </Grid>
    </HierarchicalDataTemplate>
    
    <!--带复选框的TreeView-->
    <HierarchicalDataTemplate x:Key="ItemCheckboxNode" ItemsSource="{Binding ChildNodes,Mode=TwoWay}">
        <Grid  Background="Transparent">
            <Grid.Resources>
                <convers:BooleanToVisibilityConverter x:Key="boolToVisible"/>
                <convers:VisibleToReverseConverter x:Key="visibleToReverse" />
                <sys:String x:Key="sysInverse">inverse</sys:String>
            </Grid.Resources>
            <Grid MinHeight="30" x:Name="userinfo" Background="Transparent" Margin="-5 0 0 0" Visibility="{Binding Visibility,ElementName=groupinginfo,Converter={StaticResource visibleToReverse},ConverterParameter={StaticResource sysInverse}}">
                <Grid Height="30" x:Name="grid">
                    <CheckBox IsChecked="{Binding IsChecked}" Margin="10 0 0 0" HorizontalAlignment="Left" VerticalAlignment="Center" />
                    <TextBlock Text="{Binding Name}" Margin="32 0 0 0" FontSize="12" HorizontalAlignment="Left" VerticalAlignment="Center"/>
                </Grid>
            </Grid>
            <StackPanel MinHeight="25" x:Name="groupinginfo" Orientation="Horizontal" Background="Transparent" HorizontalAlignment="Left" Visibility="{Binding IsGrouping,Converter={StaticResource boolToVisible}}">
                <CheckBox IsChecked="{Binding IsChecked}"  Margin="3,0" VerticalAlignment="Center" HorizontalAlignment="Left"/>
                <TextBlock Text="{Binding Name}" Margin="3 0" FontSize="12" VerticalAlignment="Center" HorizontalAlignment="Left"/>
            </StackPanel>
        </Grid>
    </HierarchicalDataTemplate>
    
    <!--带复选框并且子集右侧也带复选框TreeView-->
    <HierarchicalDataTemplate x:Key="ItemRightCheckboxNode" ItemsSource="{Binding ChildNodes,Mode=TwoWay}">
        <Grid  Background="Transparent">
            <Grid.Resources>
                <convers:BooleanToVisibilityConverter x:Key="boolToVisible"/>
                <convers:VisibleToReverseConverter x:Key="visibleToReverse" />
                <sys:String x:Key="sysInverse">inverse</sys:String>
            </Grid.Resources>
            <Grid MinHeight="30" x:Name="userinfo" Background="Transparent" Margin="-5 0 0 0" Visibility="{Binding Visibility,ElementName=groupinginfo,Converter={StaticResource visibleToReverse},ConverterParameter={StaticResource sysInverse}}">
                <Grid Height="30" x:Name="grid">
                    <CheckBox IsChecked="{Binding IsChecked}" Margin="10 0 0 0" HorizontalAlignment="Left" VerticalAlignment="Center" />
                    <TextBlock Text="{Binding Name}" Margin="32 0 0 0" FontSize="12" HorizontalAlignment="Left" VerticalAlignment="Center"/>
                    <CheckBox IsChecked="{Binding IsChecked}"  HorizontalAlignment="Right"  VerticalAlignment="Center" Margin="0 0 40 0"   />
                    <TextBlock Text="只读" FontSize="12" Foreground="#808080" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0 0 15 0"/>
                </Grid>
            </Grid>
            <StackPanel MinHeight="25" x:Name="groupinginfo" Orientation="Horizontal" Background="Transparent"  HorizontalAlignment="Left" Visibility="{Binding IsGrouping,Converter={StaticResource boolToVisible}}">
                <CheckBox IsChecked="{Binding IsChecked}"  Margin="3,0" VerticalAlignment="Center"  HorizontalAlignment="Left" />
                <TextBlock Text="{Binding Name}" Margin="3 0" FontSize="12" VerticalAlignment="Center" HorizontalAlignment="Left"/>
            </StackPanel>
            <StackPanel MinHeight="25" x:Name="groupinginfoRight" Orientation="Horizontal" HorizontalAlignment="Right" Background="Transparent"  Visibility="{Binding IsGrouping,Converter={StaticResource boolToVisible}}">
                <CheckBox IsChecked="{Binding IsChecked}"  HorizontalAlignment="Right" VerticalAlignment="Center"  Margin="0 0 5 0"  />
                <TextBlock Text="只读" FontSize="12" Foreground="#808080" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0 0 15 0"/>
            </StackPanel>
        </Grid>
    </HierarchicalDataTemplate>

    <Style  x:Key="DefaultTreeViewItem" TargetType="{x:Type TreeViewItem}">
        <Setter Property="MinHeight" Value="25" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <ControlTemplate.Resources>
                        <convers:IndentConverter  x:Key="indentConverter"/>
                    </ControlTemplate.Resources>
                    <Grid Background="Transparent">
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Border Name="itemBackground" Background="{TemplateBinding Background}"  
                                BorderBrush="{TemplateBinding BorderBrush}"  
                                BorderThickness="{TemplateBinding BorderThickness}"  
                                Padding="{TemplateBinding Padding}">
                            <Grid Background="Transparent">
                                <Grid x:Name="ItemRoot" Margin="{Binding Converter={StaticResource indentConverter},RelativeSource={RelativeSource TemplatedParent}}" Background="Transparent">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="16" />
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>

                                    <ToggleButton x:Name="Expander" HorizontalAlignment="Left" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}">
                                        <ToggleButton.Style>
                                            <Style TargetType="{x:Type ToggleButton}">
                                                <Setter Property="Focusable" Value="False"/>
                                                <Setter Property="Width" Value="16"/>
                                                <Setter Property="Height" Value="16"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                            <Border Background="Transparent" Height="16" Padding="5" Width="16">
                                                                <Path x:Name="ExpandPath" Data="M0,0 L0,6 L6,0 z" Fill="#66645e" Stroke="#66645e">
                                                                    <Path.RenderTransform>
                                                                        <RotateTransform Angle="135" CenterY="3" CenterX="3"/>
                                                                    </Path.RenderTransform>
                                                                </Path>
                                                            </Border>
                                                            <ControlTemplate.Triggers>
                                                                <Trigger Property="IsChecked" Value="True">
                                                                    <Setter Property="RenderTransform" TargetName="ExpandPath">
                                                                        <Setter.Value>
                                                                            <RotateTransform Angle="180" CenterY="3" CenterX="3"/>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                    <Setter Property="Fill" TargetName="ExpandPath" Value="#66645e"/>
                                                                    <Setter Property="Stroke" TargetName="ExpandPath" Value="#66645e"/>
                                                                </Trigger>
                                                                <Trigger Property="IsMouseOver" Value="True">
                                                                    <Setter Property="Stroke" TargetName="ExpandPath" Value="#66645e"/>
                                                                    <Setter Property="Fill" TargetName="ExpandPath" Value="#66645e"/>
                                                                </Trigger>
                                                                <MultiTrigger>
                                                                    <MultiTrigger.Conditions>
                                                                        <Condition Property="IsMouseOver" Value="True"/>
                                                                        <Condition Property="IsChecked" Value="True"/>
                                                                    </MultiTrigger.Conditions>
                                                                    <Setter Property="Stroke" TargetName="ExpandPath" Value="#66645e"/>
                                                                    <Setter Property="Fill" TargetName="ExpandPath" Value="#66645e"/>
                                                                </MultiTrigger>
                                                            </ControlTemplate.Triggers>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </ToggleButton.Style>
                                    </ToggleButton>
                                    <ContentPresenter Grid.Column="1" x:Name="PART_Header" ContentSource="Header" HorizontalAlignment="Stretch" >
                                    </ContentPresenter>
                                </Grid>
                            </Grid>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" Grid.Row="1"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsGrouping}" Value="false">
                            <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                        </DataTrigger>
                        <Trigger Property="HasItems" Value="False">
                            <Setter Property="Visibility" TargetName="Expander" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsExpanded" Value="False">
                            <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                        </Trigger>

                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" TargetName="itemBackground" Value="{DynamicResource ItemBackgroundSelected}"/>
                            <Setter Property="Foreground" Value="{DynamicResource ItemTextSelected}"/>
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsFocused" Value="False"/>
                                <Condition SourceName="itemBackground" Property="IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource ItemBackgroundHover}" TargetName="itemBackground"/>
                            <Setter Property="Foreground" Value="{DynamicResource ItemTextHover}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource ItemTextDisabled}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DefaultTreeView" TargetType="{x:Type TreeView}">
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="True"></Setter>
        <Setter Property="VirtualizingStackPanel.VirtualizationMode" Value="Recycling" />
        <Setter Property="ScrollViewer.IsDeferredScrollingEnabled" Value="False" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource DefaultTreeViewItem}"></Setter>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel IsItemsHost="True" Margin="0"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>